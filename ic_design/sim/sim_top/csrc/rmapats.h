#ifndef __DO_RMAHDR_
#define __DO_RMAHDR_

#ifdef __cplusplus
  extern "C" {
#endif

typedef unsigned long UP;
typedef unsigned U;
typedef unsigned char UB;
typedef unsigned char scalar;
typedef struct vec32 vec32;
typedef unsigned short US;
typedef unsigned char SVAL;
typedef unsigned char TYPEB;
typedef struct qird QIRD;
typedef unsigned char UST_e;
typedef unsigned uscope_t;
typedef U  NumLibs_t;
struct vec32 {
    U  I1;
    U  I2;
};
typedef unsigned long RP;
typedef unsigned long RO;
typedef unsigned short HsimEdge;
typedef unsigned char HsimExprChar;
typedef U  FlatNodeNum;
typedef U  InstNum;
typedef unsigned long long TimeStamp64;
typedef unsigned long long TimeStamp;
typedef TimeStamp  RmaTimeStamp;
typedef TimeStamp64  RmaTimeStamp64;
typedef union {
    double I579;
    unsigned long long I580;
    unsigned  I581[2];
} rma_clock_struct;
typedef struct eblk EBLK;
typedef int (* E_fn)(void);
struct eblk {
    struct eblk * I586;
    E_fn  I587;
    struct iptmpl * I588;
    unsigned I596;
    struct eblk * I597;
};
typedef struct {
    RP  I586;
    RP  I587;
    RP  I588;
    unsigned I596;
    RP  I597;
} RmaEblk;
typedef union {
    double I579;
    unsigned long long I580;
    unsigned  I581[2];
} clock_struct;
typedef clock_struct  RmaClockStruct;
typedef enum {
    PD_SING = 0,
    PD_RF = 1,
    PD_PLSE = 2,
    PD_PLSE_RF = 3,
    PD_NULL = 4
} PD_e;
typedef struct RmaRetain_t RmaRetain;
struct RmaRetain_t {
    RP  I617;
    RmaEblk  I585;
    U  I618;
    US  I619 :1;
    US  I620 :4;
    US  I172 :2;
    US  state :2;
    US  I622 :1;
    US  I623 :2;
    US  I624 :2;
    US  fHsim :1;
    US  I625 :1;
    scalar  newval;
    scalar  I627;
    RP  I628;
};
typedef struct MPSched MPS;
typedef struct RmaMPSched RmaMps;
struct MPSched {
    MPS  * I607;
    scalar  I608;
    scalar  I609;
    scalar  I610;
    scalar  fHsim :1;
    scalar  I172 :6;
    U  I612;
    EBLK  I613;
    void * I614;
    UP   I615[1];
};
struct RmaMPSched {
    RP  I607;
    scalar  I608;
    scalar  I609;
    scalar  I610;
    scalar  fHsim :1;
    scalar  I172 :6;
    U  I612;
    RmaEblk  I613;
    RP  I614;
    RP   I615[1];
};
typedef struct RmaMPSchedPulse RmaMpsp;
struct RmaMPSchedPulse {
    RP  I607;
    scalar  I608;
    scalar  I609;
    scalar  I610;
    scalar  I172;
    U  I612;
    RmaEblk  I613;
    scalar  I624;
    scalar  I632;
    scalar  I633;
    scalar  I634;
    U  I635;
    RmaClockStruct  I636;
    RmaClockStruct  I637;
    U  state;
    U  I638;
    RP  I588;
    RP  I639;
    RP  I640;
    RP   I615[1];
};
typedef struct MPItem MPI;
struct MPItem {
    U  * I642;
    void * I643;
};
typedef struct {
    RmaEblk  I585;
    RP  I644;
    scalar  I645;
    scalar  I624;
    scalar  I646;
} RmaTransEventHdr;
typedef struct RmaMPSchedPulseNewCsdf RmaMpspNewCsdf;
struct RmaMPSchedPulseNewCsdf {
    RP  I607;
    scalar  I608;
    scalar  I609;
    scalar  I610;
    scalar  fHsim :1;
    scalar  I172 :6;
    U  I612;
    RmaEblk  I613;
    scalar  I624;
    scalar  I632;
    scalar  I633;
    scalar  I634;
    U  state :4;
    U  I648 :28;
    RmaClockStruct  I636;
    RmaClockStruct  I637;
    RP  I649;
    RP  I588;
    RP  I650;
    RP   I615[1];
};
typedef struct red_t {
    U  I651;
    U  I652;
    U  I653;
} RED;
typedef struct predd {
    PD_e  I172;
    RED   I654[1];
} PREDD;
typedef unsigned long long ULL;
typedef struct {
    RP  I655;
    RP  I639;
    RP  I588;
    RP  I640;
    RmaEblk  I585;
    RmaEblk  I656;
    RP  I657;
    scalar  I645;
    scalar  I624;
    char state;
    uscope_t  I658;
    U  I659;
    RP  I660;
    scalar  I632;
    scalar  I633;
    scalar  I634;
    RmaClockStruct  I636;
    RmaClockStruct  I637;
    RP  I614;
} RmaPulse;
struct etype {
    U  I518 :8;
    U  I519 :24;
    U  I520;
    U  I521 :1;
    U  I522 :1;
    U  I523 :1;
    U  I524 :1;
    U  I525 :1;
    U  I526 :1;
    U  I527 :1;
    U  I528 :1;
    U  I529 :1;
    U  I530 :4;
    U  I531 :1;
    U  I532 :1;
    U  I533 :1;
    U  I534 :1;
    U  I535 :1;
    U  I536 :1;
    U  I537 :1;
    U  I538 :1;
    U  I539 :1;
    U  I540 :1;
    U  I541 :2;
    U  I542 :1;
    U  I543 :6;
    U  I544;
    UP  I545;
    U  I546;
    U  I547;
    U  I548 :1;
    U  I549 :1;
    U  I550 :1;
    U  I551 :1;
    U  I552 :2;
    U  I553 :2;
    U  I554 :1;
    U  I555 :1;
    U  I556 :1;
    U  I557 :1;
    U  I558 :1;
    U  I559 :1;
    U  I560 :18;
};
typedef enum {
    QIRDModuleC = 1,
    QIRDSVPackageC = 2
} QIRDModuleType;
typedef struct {
    U  I661 :1;
    U  I662 :1;
    U  I663 :1;
    U  I664 :1;
    U  I665 :1;
    U  I666 :1;
    U  I667 :1;
    U  I668 :1;
    U  I669 :1;
    U  I670 :1;
    U  I671 :1;
    U  I672 :1;
    U  I673 :1;
    U  I674 :1;
    U  I675 :1;
    U  I676 :1;
    U  I677 :1;
    U  I678 :1;
    U  I679 :1;
    U  I680 :1;
    QIRDModuleType  I681 :2;
    U  I682 :1;
    U  I683 :1;
    U  I684 :1;
    U  I685 :1;
    U  I686 :1;
    U  I687 :1;
    U  I688 :1;
    U  I689 :1;
    U  I690 :1;
    U  I691 :1;
    U  I692 :1;
    U  I693 :1;
    U  I694 :1;
    U  I695 :1;
} BitFlags;
struct qird {
    US  I4;
    US  I5;
    U  I6;
    U  I7;
    char * I8;
    char * I9;
    U  * I10;
    char * I11;
    char * I12;
    U  I13;
    U  I14;
    struct vcd_rt * I15;
    U  I17;
    struct _vcdOffset_rt * I18;
    UP  * I20;
    U  I21;
    UP  * I22;
    U  I23;
    U  I24;
    U  I25;
    U  * I26;
    U  * I27;
    void * I28;
    void * I29;
    U  I30;
    int I31;
    UP  I32;
    U  I33;
    U  I34;
    U  I35;
    UP  I36;
    U  * I37;
    BitFlags  I38;
    U  I39;
    U  I40;
    U  I41;
    U  I42;
    U  I43;
    U  * I44;
    U  I45;
    U  * I46;
    U  I47;
    U  I48;
    U  I49;
    U  I50;
    U  I51;
    U  I52;
    U  I53;
    U  * I54;
    U  * I55;
    U  I56;
    U  I57;
    U  * I58;
    U  I59;
    U  * I60;
    U  I61;
    U  I62;
    U  I63;
    U  I64;
    U  * I65;
    U  I66;
    U  * I67;
    U  I68;
    U  I69;
    U  I70;
    U  I71;
    U  I72;
    U  I73;
    U  * I74;
    char * I75;
    U  I76;
    U  I77;
    U  I78;
    U  I79;
    U  I80;
    U  * I81;
    U  I82;
    U  I83;
    UP  * I84;
    U  I85;
    U  I86;
    UP  * I87;
    U  I88;
    U  I89;
    U  I90;
    U  I91;
    U  I92;
    U  I93;
    U  * I94;
    U  I95;
    U  I96;
    U  * I97;
    U  * I98;
    U  * I99;
    U  * I100;
    U  * I101;
    U  I102;
    U  I103;
    struct taskInfo * I104;
    U  I106;
    U  I107;
    int * I108;
    UP  * I109;
    U  I110;
    U  I111;
    U  I112;
    U  I113;
    U  I114;
    struct qrefer * I115;
    U  * I117;
    unsigned * I118;
    void * I119;
    U  I120;
    U  I121;
    U  I122;
    U  I123;
    U  * I124;
    U  I125;
    U  * I126;
    U  I127;
    U  I128;
    U  I129;
    U  * I130;
    U  I131;
    U  * I132;
    U  I133;
    U  I134;
    U  * I135;
    U  I136;
    U  I137;
    U  * I138;
    U  * I139;
    U  * I140;
    U  I141;
    U  I142;
    U  I143;
    U  I144;
    U  I145;
    struct qrefee * I146;
    U  * I148;
    U  I149;
    struct qdefrefee * I150;
    U  * I152;
    int (* I153)(void);
    char * I154;
    U  I155;
    U  I156;
    void * I157;
    void * I158;
    NumLibs_t  I159;
    char * I160;
    U  * I161;
    U  I162;
    U  I163;
    U  I164;
    U  I165;
    U  I166;
    U  * I167;
    U  * I168;
    int I169;
    struct clock_load * I170;
    int I185;
    struct clock_data * I186;
    int I202;
    struct clock_hiconn * I203;
    U  I207;
    int I208;
    U  I209;
    int I210;
    U  * I211;
    U  * I212;
    U  I213;
    void * I214;
    U  I215;
    U  I216;
    UP  * I217;
    void * I218;
    U  I219;
    UP  * I220;
    U  * I221;
    int (* I222)(void);
    U  * I223;
    UP  * I224;
    U  * I225;
    U  I226 :1;
    U  I227 :31;
    U  I228;
    U  I229;
    UP  * I230;
    U  * I231;
    U  I232 :1;
    U  I233 :1;
    U  I234 :1;
    U  I235 :1;
    U  I236 :28;
    U  I237;
    U  I238;
    U  I239;
    U  I240;
    UP  * I241;
    UP  * I242;
    U  * I243;
    U  * I244;
    UP  * I245;
    UP  * I246;
    UP  * I247;
    U  * I248;
    UP  * I249;
    UP  * I250;
    UP  * I251;
    char * I252;
    U  I253;
    U  I254;
    U  I255;
    UP  * I256;
    UP  * I257;
    UP  * I258;
    UP  * I259;
    UP  * I260;
    UP  * I261;
    UP  * I262;
    UP  * I263;
    UP  * I264;
    U  I265;
    U  I266;
    U  I267;
    U  I268;
    U  I269;
    U  I270;
    U  I271;
    char * I272;
    U  * I273;
    U  I274;
    U  I275;
    U  I276;
    U  I277;
    U  I278;
    U  I279;
    UP  * I280;
    UP  * I281;
    UP  * I282;
    UP  * I283;
    struct daidirInfo * I284;
    struct vcs_tftable * I286;
    U  I288;
    UP  * I289;
    UP  * I290;
    U  I291;
    UP  (* I292)(void);
    UP  (* I293)(void);
    UP  (* I294)(void);
    UP  (* I295)(void);
    int * I296;
    int (* I297)(void);
    char * I298;
    UP  * I299;
    UP  * I300;
    UP  (* I301)(void);
    int (* I302)(void);
    int * I303;
    U  * I304;
    U  * I305;
    void * I306;
    void * I307;
    U  I308;
    U  I309;
    U  I310;
    U  I311;
    U  I312;
    U  I313;
    UP  * I314;
    U  * I315;
    U  * I316;
    U  I317 :15;
    U  I318 :14;
    U  I319 :1;
    U  I320 :1;
    U  I321 :1;
    U  I322 :3;
    U  I323 :1;
    U  I324 :1;
    U  I325 :1;
    U  I326 :17;
    U  I327 :3;
    U  I328 :5;
    U  I329 :1;
    struct scope * I330;
    U  I332;
    U  I333;
    U  I334;
    U  * I335;
    U  * I336;
    U  * I337;
    U  I338;
    U  I339;
    U  I340;
    struct pcbt * I341;
    U  I350;
    U  I351;
    U  I352;
    U  I353;
    void * I354;
    void * I355;
    void * I356;
    int I357;
    U  I358;
    U  I359;
    U  I360;
    U  I361;
    U  I362;
    void * I363;
    UP  * I364;
    U  I365;
    U  I366;
    void * I367;
    U  I368;
    void * I369;
    U  I370;
    void * I371;
    U  I372;
    int (* I373)(void);
    int (* I374)(void);
    void * I375;
    void * I376;
    void * I377;
    U  I378;
    U  I379;
    U  I380;
    U  I381;
    U  I382;
    U  I383;
    char * I384;
    U  I385;
    U  * I386;
    U  I387;
    U  * I388;
    U  I389;
    U  I390;
    U  I391;
    U  I392;
    U  I393;
    U  I394;
    U  * I395;
    U  I396;
    U  I397;
    U  * I398;
    U  I399;
    U  * I400;
    char * I401;
    U  I402;
    U  I403;
    U  I404;
    U  I405;
    U  * I406;
    U  I407;
    U  I408;
    struct cosim_info * I409;
    U  I411;
    U  * I412;
    U  I413;
    U  I414;
    U  * I415;
    U  I416;
    U  * I417;
    U  I418;
    U  I419;
    U  * I420;
    U  I421;
    U  * I422;
    U  I423;
    U  I424;
    U  I425;
    U  I426;
    U  I427;
    U  I428;
    U  I429;
    U  I430;
    U  * I431;
    U  * I432;
    void (* I433)(void);
    U  * I434;
    UP  * I435;
    struct mhdl_outInfo * I436;
    UP  * I438;
    U  I439;
    UP  * I440;
    U  I441;
    void * I442;
    U  * I443;
    void * I444;
    U  I445;
    U  I446;
    void * I447;
    void * I448;
    U  * I449;
    U  * I450;
    U  * I451;
    U  * I452;
    void * I453;
    U  I454;
    void * I455;
    U  * I456;
    char * I457;
    int (* I458)(void);
    U  * I459;
    char * I460;
    char * I461;
    U  I462;
    U  * I463;
    struct regInitInfo * I464;
    UP  * I466;
    U  * I467;
    char * I468;
    U  I469;
    U  I470;
    U  I471;
    U  I472;
    U  I473;
    U  I474;
    U  I475;
    U  I476;
    U  * I477;
    U  * I478;
    U  I479;
    U  I480;
    U  I481;
    U  I482;
    UP  * I483;
    U  I484;
    UP  * I485;
    U  I486;
    U  I487;
    U  I488;
    U  * I489;
    U  I490;
    U  I491;
    U  * I492;
    U  * I493;
    UP  * I494;
    UP  * I495;
    void * I496;
    UP  I497;
    void * I498;
    void * I499;
    void * I500;
    U  * I501;
    U  * I502;
    U  I503;
    U  I504;
    int I505;
    void * I506;
    UP  * I507;
    UP  I508;
    U  I509;
    char * I510;
    U  * I511;
    U  * I512;
    char * I513;
    int * I514;
    UP  * I515;
    struct etype * I516;
    U  I561;
    U  I562;
    U  * I563;
    U  I564;
    U  * I565;
    U  I566;
    U  I567;
    U  * I568;
};
typedef struct pcbt {
    U  * I343;
    UP  I344;
    U  I345;
    U  I346;
    U  I347;
    U  I348;
    U  I349;
} PCBT;
struct iptmpl {
    QIRD  * I590;
    struct vcs_globals_t * I591;
    void * I593;
    UP  I594;
    UP  I595;
    struct iptmpl * I588[2];
};
typedef unsigned long long FileOffset;
typedef struct _hsimPeriodL {
    char  I728[256];
    struct _hsimPeriodL * I700;
} HsimPeriodL;
typedef struct {
    U   I730[2];
    U  I731 :1;
    U  I732 :1;
    U  I733 :8;
    U  I734 :8;
    U  I735 :8;
    U  I736 :4;
    unsigned long long I737;
    unsigned long long I738;
    unsigned long long I739;
    unsigned long long I740;
    unsigned long long I741;
    U  I742;
    U  I743;
    U  I744;
    U  I745;
    HsimPeriodL  * I746;
    HsimPeriodL  * I747;
    U  I748;
} HsimSignalMonitor;
typedef struct {
    FlatNodeNum  I749;
    InstNum  I750;
    scalar  I751;
    U  I752;
    U  I753;
    U  I754;
    U  I755;
    U  I756;
    U  I757;
    U  I758;
    HsimSignalMonitor  * I759;
    RmaTimeStamp64  I760;
    U  I761;
} HsimNodeRecord;
typedef struct {
    RP  I762;
    RP  I588;
} RmaIbfIp;
typedef struct {
    RP  I762;
    RP  I763;
} RmaIbfPcode;
typedef struct {
    RmaEblk  I585;
} RmaEvTriggeredOrSyncLoadCg;
typedef struct {
    RmaEblk  I585;
    RP  I764;
    vec32  I765;
} RmaAnySchedVCg;
typedef struct {
    RmaEblk  I585;
    RP  I764;
    vec32   I623[1];
} RmaAnySchedWCg;
typedef struct {
    RmaEblk  I585;
    RP  I764;
    scalar   I766[1];
} RmaAnySchedECg;
typedef struct {
    RP  I767;
} RmaRootCbkCg;
typedef struct {
    RP  I768;
} RmaRootVcdCg;
typedef struct {
    RP  I769;
} RmaRootForceCbkCg;
typedef struct {
    RmaEblk  I585;
    RP  I770;
} RmaForceCbkJmpCg;
typedef struct {
    U  I5;
    U  I583 :30;
    U  I771 :1;
    U  I772 :1;
    vec32  I773;
    U  I774;
    RP  I775;
    RP  I776;
} RmaForceSelectorV;
typedef struct {
    RP  ptable;
    RP  pfn;
    RP  I763;
} Rma1InputGateFaninCgS;
typedef struct {
    U  I5;
    U  iinput;
    RP  I782;
} RmaCondOptLoad;
typedef struct {
    U  I5;
    U  iinput;
    RP  I782;
} RmaCellStateUpdate;
typedef struct {
    U  I5;
    U  state;
    US  I783;
    US  I703;
    U  * I784;
} RmaCellState;
typedef struct {
    U  iinput;
    RP  I785;
} RmaMultiInputLogicGateCg;
typedef struct {
    U  iinput;
    RP  ptable;
    RP  I785;
} RmaSeqPrimEdgeInputCg;
typedef struct {
    RmaEblk  I585;
    RP  I763;
} RmaSched0GateCg;
typedef struct {
    RmaEblk  I585;
    RP  I763;
    RP  pfn;
} RmaUdpDeltaGateCg;
typedef struct {
    scalar  I786;
    RmaEblk  I585;
    RP  I763;
    RP  pfn;
} RmaSchedDeltaGateCg;
typedef struct {
    UB  I787;
    RP  I788;
    RP  I789;
} RmaPropNodeSeqLhsSCg;
typedef struct {
    RmaEblk  I585;
    RP  I763;
    U  I708;
    U   I576[1];
} RmaBitEdgeEblk;
typedef struct {
    U  I5;
    RP  I654;
    RmaEblk  I585;
    RmaIbfPcode  I790;
} RmaGateDelay;
typedef struct {
    U  I5;
    union {
        RP  I882;
        RP  I1093;
        RP  I1104;
    } I628;
    RmaIbfPcode  I790;
} RmaMPDelay;
typedef struct {
    U  I5;
    RmaPulse  I791;
    RmaIbfPcode  I790;
} RmaMPPulseHybridDelay;
typedef struct {
    U  I5;
    RmaIbfPcode  I790;
    RmaMps  I792;
} RmaMPHybridDelay;
typedef struct {
    U  I5;
    U  I793;
    RmaIbfPcode  I790;
    RmaEblk  I613;
} RmaMPHybridDelayPacked;
typedef struct {
    U  I5;
    RmaIbfPcode  I790;
    RmaMpspNewCsdf  I794;
} RmaMPPulseDelay;
typedef struct {
    U  I5;
    RmaMpsp  I794;
    RmaIbfPcode  I790;
} RmaMPPulseOptHybridDelay;
typedef struct {
    U  I5;
    U  I653;
    RmaTransEventHdr  I713;
    RP  I650;
    RmaIbfPcode  I790;
} RmaNtcTransDelay;
typedef struct {
    U  I5;
    U  I653;
    RmaEblk  I585;
    RmaIbfPcode  I790;
} RmaNtcTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I585;
    RmaIbfPcode  I790;
} RmaNtcTransZeroDelay;
typedef struct {
    U  I5;
    U  I795;
    U  I796;
    RmaTransEventHdr  I713;
    RP  I650;
    RmaIbfPcode  I790;
} RmaNtcTransDelayRF;
typedef struct {
    U  I5;
    U  I795;
    U  I796;
    RmaEblk  I585;
    RmaIbfPcode  I790;
} RmaNtcTransMpwOptDelayRF;
typedef struct {
    U  I5;
    RP  I797;
    RmaTransEventHdr  I713;
    RP  I650;
    RmaIbfPcode  I790;
} RmaICTransDelay;
typedef struct {
    U  I5;
    RP  I797;
    RmaEblk  I585;
    RmaIbfPcode  I790;
} RmaICTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I585;
    RmaIbfPcode  I790;
} RmaICTransZeroDelay;
typedef struct {
    U  I5;
    RP  I654;
    RmaEblk  I585;
    RmaIbfPcode  I790;
} RmaICSimpleDelay;
typedef struct {
    U  I5;
    union {
        RP  psimple;
        RP  I1093;
        RP  I1104;
    } I628;
    RmaIbfPcode  I790;
} RmaICDelay;
typedef struct {
    U  I5;
    RP  I654;
    RmaEblk  I585;
    RmaIbfPcode  I790;
} RmaPortDelay;
typedef struct TableAssign_ {
    struct TableAssign_ * I700;
    struct TableAssign_ * I644;
    U  I5;
    U  iinput;
    RP  ptable;
    RP  I785;
} TableAssign;
typedef struct {
    U  I5;
    RP  I644;
    RP  I799;
} RmaTableAssignList;
typedef struct {
    RP  I800;
} RmaWakeupListCg;
typedef struct {
    U  I801;
    U  I802;
    RmaTimeStamp   I803[1];
} RmaTsArray;
typedef struct {
    RP  I700;
    RP  I804;
    RP  I582;
    U  I805;
    scalar  I806;
    scalar  I807;
    US  I808 :1;
    US  I809 :1;
    US  I810 :1;
    US  I811 :1;
    US  I812 :1;
    US  I625 :11;
} RmaTcCoreSimple;
typedef struct {
    RP  I700;
    RP  I804;
    RP  I582;
    U  I805;
    scalar  I806;
    scalar  I807;
    US  I808 :1;
    US  I809 :1;
    US  I810 :1;
    US  I811 :1;
    US  I812 :1;
    US  I625 :11;
    RP  I813;
} RmaTcCoreConditional;
typedef struct {
    RP  I700;
    RP  I804;
    RP  I582;
    U  I805;
    scalar  I806;
    scalar  I807;
    US  I808 :1;
    US  I809 :1;
    US  I810 :1;
    US  I811 :1;
    US  I812 :1;
    US  I625 :11;
    RP  I813;
    RP  I814;
} RmaTcCoreConditionalOpt;
typedef struct {
    RP  I700;
    RP  I804;
    RP  I582;
    U  I805;
    scalar  I806;
    scalar  I807;
    US  I808 :1;
    US  I809 :1;
    US  I810 :1;
    US  I811 :1;
    US  I812 :1;
    US  I625 :11;
    RP  I814;
    RP  I815;
} RmaTcCoreConditionalMtc;
typedef struct {
    RP  I804;
    RP  I582;
    U  I805;
    scalar  I806;
    scalar  I807;
    US  I808 :1;
    US  I809 :1;
    US  I810 :1;
    US  I811 :1;
    US  I812 :1;
    US  I625 :11;
} RmaTcCoreSimpleNoList;
typedef struct {
    RP  I804;
    RP  I582;
    U  I805;
    scalar  I806;
    scalar  I807;
    US  I808 :1;
    US  I809 :1;
    US  I810 :1;
    US  I811 :1;
    US  I812 :1;
    US  I625 :11;
    RP  I816;
} RmaTcCoreSimpleNoListMdb;
typedef struct {
    RP  I804;
    RP  I582;
    U  I805;
    scalar  I806;
    scalar  I807;
    US  I808 :1;
    US  I809 :1;
    US  I810 :1;
    US  I811 :1;
    US  I812 :1;
    US  I625 :11;
    RP  I813;
} RmaTcCoreConditionalNoList;
typedef struct {
    RP  I804;
    RP  I582;
    U  I805;
    scalar  I806;
    scalar  I807;
    US  I808 :1;
    US  I809 :1;
    US  I810 :1;
    US  I811 :1;
    US  I812 :1;
    US  I625 :11;
    RP  I813;
    RP  I814;
} RmaTcCoreConditionalOptNoList;
typedef struct {
    RP  I804;
    RP  I582;
    U  I805;
    scalar  I806;
    scalar  I807;
    US  I808 :1;
    US  I809 :1;
    US  I810 :1;
    US  I811 :1;
    US  I812 :1;
    US  I625 :11;
    RP  I814;
    RP  I815;
} RmaTcCoreConditionalMtcNoList;
typedef struct {
    RP  I804;
    RP  I582;
    U  I805;
    scalar  I806;
    scalar  I807;
    US  I808 :1;
    US  I809 :1;
    US  I810 :1;
    US  I811 :1;
    US  I812 :1;
    US  I625 :11;
    RP  I813;
    RP  I816;
} RmaTcCoreConditionalNoListMdb;
typedef struct {
    RP  I817;
    RmaTimeStamp  I818;
    scalar  I819;
} RmaConditionalTSLoadNoList;
typedef struct {
    RP  I700;
    RP  I817;
    RmaTimeStamp  I818;
    scalar  I819;
} RmaConditionalTSLoad;
typedef struct {
    RmaTimeStamp  I818;
    scalar  I819;
    US  I806;
    RP  I814;
} RmaConditionalTSLoadOptNoList;
typedef struct {
    RP  I700;
    RmaTimeStamp  I818;
    scalar  I819;
    US  I806;
    RP  I814;
} RmaConditionalTSLoadOpt;
typedef struct {
    RP  I814;
    RP  I820;
} RmaConditionalTSLoadMtcNoList;
typedef struct {
    RP  I700;
    RP  I814;
    RP  I820;
} RmaConditionalTSLoadMtc;
typedef struct {
    U  I821;
    U  I822;
    FlatNodeNum  I823;
    U  I708;
    U  I824;
    U  I825;
    RmaIbfPcode  I790;
    union {
        scalar  I826;
        vec32  I827;
        scalar  * I828;
        vec32  * I829;
    } val;
} RmaScanSwitchData;
typedef struct {
    RP  I700;
    RP  I644;
    RP  I830;
} RmaDoublyLinkedListElem;
typedef struct {
    RmaDoublyLinkedListElem  I831;
    RmaIbfPcode  I790;
} RmaSwitchGate;
struct clock_load {
    U  I172 :5;
    U  I173 :12;
    U  I174 :1;
    U  I175 :2;
    U  I176 :1;
    U  I177 :1;
    U  I178 :1;
    U  I179 :9;
    U  I180;
    U  I181;
    void (* pfn)(void * I183, char val);
};
typedef struct clock_data {
    U  I188 :1;
    U  I189 :1;
    U  I190 :1;
    U  I191 :1;
    U  I172 :5;
    U  I173 :12;
    U  I192 :6;
    U  I193 :1;
    U  I175 :2;
    U  I176 :1;
    U  I179 :1;
    U  I194;
    U  I195;
    U  I196;
    U  I180;
    U  I197;
    U  I198;
    U  I199;
    U  I200;
    U  I201;
} HdbsClockData;
struct clock_hiconn {
    U  I205;
    U  I206;
    U  I180;
    U  I175;
};
typedef struct _RmaDaiCg {
    RP  I832;
    RP  I833;
    U  I834;
} RmaDaiCg;
typedef union _RmaCbkMemOptUnion {
    RP  I832;
    RP  I835;
    RP  I836;
} RmaCbkMemOptUnion;
typedef struct _RmaDaiOptCg {
    RmaCbkMemOptUnion  I837;
} RmaDaiOptCg;
struct futq {
    struct futq * I598;
    struct futq * I600;
    RmaEblk  * I601;
    RmaEblk  * I602;
    U  I596;
};
struct sched_table {
    struct futq * I603;
    struct futq I604;
    struct hash_bucket * I605;
};
struct dummyq_struct {
    clock_struct  I838;
    EBLK  * I839;
    EBLK  * I840;
    struct futq * I841;
    struct futq * I842;
    struct sched_table * I843;
    struct millenium * I845;
    EBLK  * I847;
    EBLK  * I848;
    EBLK  * I849;
    EBLK  * I850;
    EBLK  * I851;
    EBLK  * I852;
    EBLK  * I853;
    EBLK  * I854;
    EBLK  * I855;
    EBLK  * I856;
    EBLK  * I857;
    EBLK  * I858;
    EBLK  * I859;
    EBLK  * I860;
    EBLK  * I861;
    MPS  * I862;
};
typedef void (* FP)(void *  , scalar   );
typedef void (* FP1)(void *  );
typedef void (* FPRAP)(void *  , vec32  *  , U   );
typedef U  (* FPU1)(void *  );
typedef void (* FPV)(void *  , UB  *  );
typedef void (* FPVU)(void *  , UB  *  , U   );
typedef void (* FPLSEL)(void *  , scalar   , U   );
typedef void (* FPLSELV)(void *  , vec32  *  , U   , U   );
typedef void (* FPFPV)(UB  *  , UB  *  , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPRPV)(UB  *  , U   , U   , U   );
typedef void (* FPEVCDLSEL)(void *  , scalar   , U   , UB  *  );
typedef void (* FPEVCDLSELV)(void *  , vec32  *  , U   , U   , UB  *  );
typedef struct _lqueue {
    EBLK  * I586;
    EBLK  * I863;
    int I864;
    struct _lqueue * I617;
} Queue;
typedef struct {
    EBLK  I866;
    U  I867;
    union {
        void * pHeap;
        Queue  * pList;
    } I573;
    Queue   I868[1];
} Qhdr;
extern UB   Xvalchg[];
extern UB   X4val[];
extern UB   X3val[];
extern UB   XcvtstrTR[];
extern UB   Xbuf[];
extern UB   Xbitnot[];
extern UB   Xwor[];
extern UB   Xwand[];
extern U   Xbitnot4val[];
extern UB   globalTable1Input[];
extern unsigned long long vcs_clocks;
extern UB   Xunion[];
extern U  fRTFrcRelCbk;
extern FP  txpFnPtr;
extern FP   rmaFunctionArray[];
extern FP   rmaFunctionRtlArray[];
extern U  rmaFunctionCount;
extern UB  dummyScalar;
extern UB  fScalarIsForced;
extern UB  fScalarIsReleased;
extern U  fNotimingchecks;
extern RP  * iparr;
extern FP1  * rmaPostAnySchedFnPtr;
extern FP1  * rmaPostAnySchedVFnPtr;
extern FP1  * rmaPostAnySchedWFnPtr;
extern FP1  * rmaPostAnySchedEFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusNonCongruentFnPtr;
extern FP1  * rmaPostSchedUpdateEvTrigFnPtr;
extern FP1  * rmaSched0UpdateEvTrigFnPtr;
extern FP1  * rmaPostSchedRecoveryResetDbsFnPtr;
extern U  fGblDataOrTime0Prop;
extern UB   rmaEdgeStatusValArr[];
extern FP1  * propForceCbkSPostSchedCgFnPtr;
extern FP1  * propForceCbkMemoptSPostSchedCgFnPtr;
extern UB  * ptableGbl;
extern Qhdr  * lvlQueue;
extern U  mhdl_delta_count;
extern U  ignoreSchedForScanOpt;
extern U  fignoreSchedForDeadComboCloud;
extern int fZeroUser;
extern EBLK  * peblkFutQ1Head;
extern EBLK  * peblkFutQ1Tail;


extern void *mempcpy(void* s1, void* s2, unsigned n);
extern UB* rmaEvalDelays(UB* pcode, scalar val);
extern UB* rmaEvalDelaysV(UB* pcode, vec32* pval);
extern void rmaPopTransEvent(UB* pcode);
extern void rmaSetupFuncArray(UP* ra, U c, U w);
extern void SinitHsimPats(void);
extern void VVrpDaicb(void* ip, U nIndex);
extern int SDaicb(void *ip, U nIndex);
extern void SDaicbForHsimNoFlagScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlagStrengthScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlag2(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimWithFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlagFrcRel(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimNoFlagFrcRel2(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void VcsHsimValueChangeCB(void* pRmaDaiCg, void* pValue, unsigned int valueFormat);
extern U isNonDesignNodeCallbackList(void* pRmaDaiCg);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void VVrpNonEventNonRegdScalarForHsimOptCbkMemopt(void* ip, U nIndex);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabFrcRel(U* mem, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimCbkMemOptNoFlagFrcRel(void* pDaiCb, unsigned char reason, int msb, int lsb, int ndx);
extern void hsimDispatchCbkMemOptForVcd(RP p, U val);
extern void* hsimGetCbkMemOptCallback(RP p);
extern void hsimDispatchCbkMemOptNoDynElabS(RP* p, U val, U isStrength);
extern void* hsimGetCbkPtrNoDynElab(RP p);
extern void hsimDispatchCbkMemOptDynElabS(U** pvcdarr, U** pcbkarr, U val, U isScalForced, U isScalReleased, U isStrength);
extern void hsimDispatchCbkMemOptNoDynElabVector(RP* /*RmaDaiOptCg* */p, void* pval, U /*RmaValueType*/ vt, U cbits);
extern void copyAndPropRootCbkCgS(RmaRootCbkCg* pRootCbk, scalar val);
extern void copyAndPropRootCbkCgV(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgW(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgE(RmaRootCbkCg* rootCbk, scalar* pval);
extern void dumpRootVcdCg(RmaRootVcdCg* pRootVcd, scalar val);
extern void Wsvvar_callback_non_dynamic1(RP* ptr, int);
extern void rmaExecEvSyncList(RP plist);
extern void Wsvvar_callback_virt_intf(RP* ptr);
extern void Wsvvar_callback_hsim_var(RP* ptr);
extern void checkAndConvertVec32To2State(vec32* value, vec32* svalue, U cbits, U* pforcedBits);
extern unsigned int fGblDataOrTime0Prop;
extern void SchedSemiLerMP1(UB* pmps, U partId);
extern void SchedSemiLerMPO(UB* pmpso, U partId);
extern void rmaDummyPropagate(void);
extern void hsUpdateModpathTimeStamp(UB* pmps);
extern void doMpd32One(UB* pmps);
extern void SchedSemiLerMP(UB* ppulse, U partId);
extern EBLK *peblkFutQ1Head;
extern EBLK *peblkFutQ1Tail;
extern void scheduleuna(UB *e, U t);
extern void scheduleuna_mp(EBLK *e, unsigned t);
extern void schedule(UB *e, U t);
extern void sched_hsopt(struct dummyq_struct * pQ, EBLK *e, U t);
extern void sched_millenium(struct dummyq_struct * pQ, void *e, U thigh, U t);
extern void schedule_1(EBLK *e);
extern void sched0(UB *e);
extern void sched0Raptor(UB *e);
extern void sched0lq(UB *e);
extern void sched0lqnc(EBLK *e);
extern void sched0una(UB *e);
extern void sched0una_th(struct dummyq_struct *pq, UB *e);
extern void scheduleuna_mp_th(struct dummyq_struct *pq, EBLK *e, unsigned t);
extern void schedal(UB *e);
extern void sched0_th(struct dummyq_struct * pQ, UB *e);
extern void sched0u(UB *e);
extern void sched0_hsim_front_th(struct dummyq_struct * pQ, UB *e);
extern void sched0_hsim_frontlq_th(struct dummyq_struct * pQ, UB *e);
extern void sched0lq_th(struct dummyq_struct * pQ, UB *e);
extern void schedal_th(struct dummyq_struct * pQ, UB *e);
extern void scheduleuna_th(struct dummyq_struct * pQ, void *e, U t);
extern void schedule_th(struct dummyq_struct * pQ, UB *e, U t);
extern void schedule_1_th(struct dummyq_struct * pQ, EBLK *peblk);
extern void SetupLER_th(struct dummyq_struct * pQ, UB *e);
extern void SchedSemiLer_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXP_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXPFreeVar_th(struct dummyq_struct * pQ, EBLK *e);
extern U getVcdFlags(UB *ip);
extern void VVrpNonEventNonRegdScalarForHsimOpt(void* ip, U nIndex);
extern void VVrpNonEventNonRegdScalarForHsimOpt2(void* ip, U nIndex);
extern void SchedSemiLerTBReactiveRegion(struct eblk* peblk);
extern void SchedSemiLerTBReactiveRegion_th(struct eblk* peblk, U partId);
extern void SchedSemiLerTr(UB* peblk, U partId);
extern void sched0sd_hsim(UB* peblk);
extern void appendNtcEvent(UB* phdr, scalar s, U schedDelta);
extern void schedRetainHsim(MPS* pMPS, scalar sv, scalar pv);
extern void updateRetainHsim(MPS* pMPS,scalar sv, scalar pv);
extern void hsimRegisterEdge(void* sm,  scalar s);
extern U pvcsGetPartId();
extern void HsimPVCSPartIdCheck(U instNo);
extern void debug_func(U partId, struct dummyq_struct* pQ, EBLK* EblkLastEventx); 
extern struct dummyq_struct* pvcsGetQ(U thid);
extern EBLK* pvcsGetLastEventEblk(U thid);
extern void insertTransEvent(RmaTransEventHdr* phdr, scalar s, scalar pv,	scalar resval, U schedDelta, int re, UB* predd, U fpdd);
extern void insertNtcEventRF(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, U* delays);
extern U doTimingViolation(RmaTimeStamp ts,RP* pdata, U fskew, U limit, U floaded, U fcondopt);
extern void sched_gate_hsim(EBLK* peblk, unsigned t, RP* offset);
extern int getCurSchedRegion();
extern FP getRoutPtr(RP, U);
extern U rmaChangeCheckAndUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern void rmaUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaChangeCheckAndUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaLhsPartSelUpdateE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaUpdateWithForceSelectorE(scalar* pvalDst, scalar* pvalSrc, U cbits, U* pforceSelector);
extern void rmaUpdateWFromE(vec32* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaLhsPartSelWFromE(vec32* pvalDst, scalar* pvalSrc, U index,U width);
extern U rmaChangeCheckAndUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckW(vec32* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern U rmaLhsPartSelWithChangeCheckEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelUpdateW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void rmaEvalWunionW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWorW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWandW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalUnionE(scalar* dst, scalar* src, U cbits, U count, RP ptable);
typedef U RmaCgFunctionType;
extern RmaIbfPcode* rmaEvalPartSelectsW(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsEToE(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsEToW(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern U rmaEvalBitPosEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U VcsForceVecVCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U/*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecVCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecWCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecWCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecECg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecCg(UB* pcode, UB* pvDst, U ibeginDst, U width, U /*RmaValueType*/ type,U fisRoot, UB* prhsDst, U frhs, U* pforcedbits);
extern U VcsDriveBitsAndDoChangeCheckV(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckW(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckE(scalar* pvSel, scalar* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern void cgvecDebug_Eblk(UB* pcode);
extern U rmaCmpW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void copyVec32ArrMask(vec32* pv1, vec32* pv2, U len, U* mask);
extern void* memcpy(void*, const void*, size_t);
extern int memcmp(const void*, const void*, size_t);
extern void propagateScanOptPathVal(EBLK *peblk);
extern UB* rmaProcessScanSwitches(UB* pcode, scalar val);
extern UB* rmaProcessScanSwitchesV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanoptDump(UB* pcode, scalar val);
extern UB* rmaProcessScanoptDumpV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanChainOptSeqPrims(UB* pcode, scalar val);
extern void rmaProcessPvcsCcn(UB* pcode, scalar val);
extern void rmaProcessPvcsCcnE(UB* pcode, scalar* val);
extern void rmaProcessPvcsCcnW(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnV(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnCompiledS(UB* pcode, U offset, scalar ibnval);
extern void rmaProcessPvcsCcnCompiledV(UB* pcode, U offset, vec32* pval);
extern void schedResetRecoveryDbs(U cedges, EBLK* peblkFirst);
extern UB* rmaEvalUnaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVOneFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVLargeFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalAndOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpV(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpV(UB* pcode, vec32* value);
extern UB* rmaEvalTernaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalTernaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalBinaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpS(UB* pcode, scalar val);
extern scalar rmaGetScalarFromWCg(vec32* pval, U index);
extern void rmaSetScalarInWCg(vec32* pval, U index, scalar s);
extern void rmaCountRaptorBits(void* pval, void* pvalPrev, U cbits, U vt);
extern void setHsimFunc(void* ip);
extern void unsetHsimFunc(void* ip);
extern UB* getEvcdStatusByFlagsE(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsV(vec32* pvec32, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsS(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table);
extern UB* getSingleDrvEvcdStatusS(UB value, U fTBDriver);
extern UB* getSingleDrvEvcdStatusE(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getSingleDrvEvcdStatusV(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getEvcdStatusByDrvEvcdStatus(UB* pdrvevcdStatus, U cdrivers, UB* table, U cbits);
extern void evcdCallback(UP pcode, U cbits);
extern UB* getSavedEvcdStatus(void);
extern void saveEvcdStatus(UB*);
extern void mhdlMarkExport(void*, U);
extern void levelInsertQueue(int);
extern void VcsRciRtl(RP pcode);
extern EBLK* loopReportInlinedSched0Wrapper(EBLK *peblk);
extern void loopReportSched0Wrapper(EBLK *peblk, unsigned int sfType, unsigned int fTH, struct dummyq_struct* pq);
extern void loopReportSchedSemiLerWrapper(EBLK *peblk, int sfType);
extern void CallGraphPushNodeAndAddToGraph(UP flatNode, UP instNum, U dummy);
extern void CallGraphPopNode(void);
extern RP elabGetIpTpl(U in);
extern U rmaEvalBitBothEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQXW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval01EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval0XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval10EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval1XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX1EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX0EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitPosEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitBothEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
typedef void (*FuncPtr)();


#ifdef __cplusplus
extern "C" {
#endif
void  hsM_1_0(UB  * I763, scalar  val);
void  hsM_1_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_1_2(UB  * I763);
void  hsM_2_0(UB  * I763, scalar  val);
void  hsM_2_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_2_2(UB  * I763);
void  hsM_3_0(UB  * I763, scalar  val);
void  hsM_3_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_3_2(UB  * I763);
void  hsM_3_5(UB  * I763, UB  val);
void  hsM_4_0(UB  * I763, scalar  val);
void  hsM_4_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_4_2(UB  * I763);
void  hsM_5_0(UB  * I763, scalar  val);
void  hsM_6_0(UB  * I763, scalar  val);
void  hsM_6_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_6_2(UB  * I763);
void  hsM_6_5(UB  * I763, UB  val);
void  hsM_7_0(UB  * I763, scalar  val);
void  hsM_7_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_7_2(UB  * I763);
void  hsM_7_5(UB  * I763, UB  val);
void  hsM_8_0(UB  * I763, scalar  val);
void  hsM_8_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_8_2(UB  * I763);
void  hsM_16_0(UB  * I763, scalar  val);
void  hsM_20_0(UB  * I763, scalar  val);
void  hsM_20_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_20_2(UB  * I763);
void  hsM_21_0(UB  * I763, scalar  val);
void  hsM_21_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_21_2(UB  * I763);
void  hsM_21_8(UB  * I763, scalar  val);
void  hsM_22_0(UB  * I763, scalar  val);
void  hsM_22_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_22_2(UB  * I763);
void  hsM_22_5(UB  * I763, UB  val);
void  hsM_23_0(UB  * I763, scalar  val);
void  hsM_23_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_23_2(UB  * I763);
void  hsM_23_5(UB  * I763, UB  val);
void  hsM_24_0(UB  * I763, scalar  val);
void  hsM_24_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_24_2(UB  * I763);
void  hsM_25_0(UB  * I763, scalar  val);
void  hsM_25_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_25_2(UB  * I763);
void  hsM_29_0(UB  * I763, scalar  val);
void  hsM_29_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_29_2(UB  * I763);
void  hsM_32_0(UB  * I763, scalar  val);
void  hsM_32_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_32_2(UB  * I763);
void  hsM_33_0(UB  * I763, scalar  val);
void  hsM_33_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_33_2(UB  * I763);
void  hsM_34_0(UB  * I763, scalar  val);
void  hsM_34_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_34_2(UB  * I763);
void  hsM_35_0(UB  * I763, scalar  val);
void  hsM_36_0(UB  * I763, scalar  val);
void  hsM_36_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_36_2(UB  * I763);
void  hsM_37_0(UB  * I763, scalar  val);
void  hsM_37_1(UB  * I763, scalar  val, U  I891, scalar  * I890);
void  hsM_37_2(UB  * I763);
void  hsG_0(struct dummyq_struct * I874, EBLK  * I875, U  I653);
U   hsG_1(U  I888);
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
  }
#endif
#endif /*__DO_RMAHDR_*/

